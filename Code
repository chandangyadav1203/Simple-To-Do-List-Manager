#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TASKS 10
#define MAX_TASK_LENGTH 100

typedef struct {
    char description[MAX_TASK_LENGTH];
    int is_completed;
} Task;

Task tasks[MAX_TASKS];
int task_count = 0;

void print_menu();
void add_task();
void delete_task();
void view_tasks();
void mark_completed();
void clear_input_buffer();

int main() {
    int choice;
    
    while (1) {
        print_menu();
        printf("Enter your choice: ");
        scanf("%d", &choice);
        clear_input_buffer();

        switch (choice) {
            case 1:
                add_task();
                break;
            case 2:
                delete_task();
                break;
            case 3:
                view_tasks();
                break;
            case 4:
                mark_completed();
                break;
            case 5:
                printf("Exiting program...\n");
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

void print_menu() {
    printf("\n---- To-Do List Manager ----\n");
    printf("1. Add Task\n");
    printf("2. Delete Task\n");
    printf("3. View Tasks\n");
    printf("4. Mark Task as Completed\n");
    printf("5. Exit\n");
}

void add_task() {
    if (task_count >= MAX_TASKS) {
        printf("Task list is full. Cannot add more tasks.\n");
        return;
    }

    Task new_task;
    printf("Enter task description: ");
    fgets(new_task.description, MAX_TASK_LENGTH, stdin);
    new_task.description[strcspn(new_task.description, "\n")] = '\0'; // Remove newline character
    new_task.is_completed = 0;

    tasks[task_count] = new_task;
    task_count++;

    printf("Task added successfully.\n");
}

void delete_task() {
    int task_id;
    view_tasks();
    
    printf("Enter task ID to delete: ");
    scanf("%d", &task_id);
    clear_input_buffer();

    if (task_id < 1 || task_id > task_count) {
        printf("Invalid task ID.\n");
        return;
    }

    for (int i = task_id - 1; i < task_count - 1; i++) {
        tasks[i] = tasks[i + 1];
    }

    task_count--;
    printf("Task deleted successfully.\n");
}

void view_tasks() {
    if (task_count == 0) {
        printf("No tasks available.\n");
        return;
    }

    printf("\n---- Task List ----\n");
    for (int i = 0; i < task_count; i++) {
        printf("ID: %d - %s [%s]\n", i + 1, tasks[i].description, tasks[i].is_completed ? "Completed" : "Not Completed");
    }
}

void mark_completed() {
    int task_id;
    view_tasks();

    printf("Enter task ID to mark as completed: ");
    scanf("%d", &task_id);
    clear_input_buffer();

    if (task_id < 1 || task_id > task_count) {
        printf("Invalid task ID.\n");
        return;
    }

    tasks[task_id - 1].is_completed = 1;
    printf("Task marked as completed.\n");
}

void clear_input_buffer() {
    while (getchar() != '\n');
}
